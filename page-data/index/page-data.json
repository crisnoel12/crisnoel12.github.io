{"componentChunkName":"component---src-pages-index-tsx","path":"/","result":{"data":{"allContentfulExperience":{"nodes":[{"id":"68460024-a0eb-5dd4-98a7-0aefd17c7c1b","contentful_id":"4bO2e4Xt2wD8fuHkYlb63y","position":"Programmer Analyst","company":"The B. John Garrick Institute for the Risk Sciences at UCLA","responsibilities":["Worked as the lead Frontend Developer on various Risk Assessment Web Apps built on top of React, Typescript and Material UI.","Successfully completed 5 project deliverables for clients such as NASA's JPL program, Japan’s Nuclear Regulatory Authority and PG&E.","Contributed in developing an internal COVID-19 infection prediction model web app using R Shiny.","Integrated 3rd party packages into internal applications to speed up development time and avoid reinventing the wheel.","Lead the development team for the Pipeline System Integrity Management Web App deliverable.","Maintained web servers which hosted different versions of the department's web apps via docker deployments.","Conducted interviews of applicants and assessed their skills via code reviews."],"createdAt":"2021-01-06T19:36:51.727Z","logo":{"file":{"url":"//images.ctfassets.net/e87exinclc25/7dngWeZSJ8OaER4ZUgpw2x/5d8fb49eb858f1af05d30f01f6ad2897/BJG-UCLA.jpg"}}},{"id":"d63c225e-2db1-586d-abff-e6bcc3d0edf4","contentful_id":"Lef0AdeJ2upUojQxzNf3C","position":"React Native Consultant","company":"Machine Ventures","responsibilities":["Contributed in reducing crash rates for MyKuya User Mobile App by 90% from previous release.","Made UI and UX performance improvements for MyKuya User and Partner Mobile Apps."],"createdAt":"2021-01-06T19:41:18.847Z","logo":{"file":{"url":"//images.ctfassets.net/e87exinclc25/11SDkV1RjaIDVjkW0lrS6t/cb50b830edfffce47682e61129da6149/machine-ventures.png"}}},{"id":"919e73a6-125b-58ff-9c69-516d1884f6ab","contentful_id":"5eUS7k4S7y934qkrD5FuPH","position":"Web Developer","company":"Alpine Electronics of America, Inc.","responsibilities":["Coded up a dashboard redesign of the company's internal website in two weeks.","Integrated an online file explorer feature to the site.","Created various PHP functions in CodeIgniter to persist data to database.","Created AJAX code to interact with back end for a better user experience."],"createdAt":"2021-01-06T19:43:35.073Z","logo":{"file":{"url":"//images.ctfassets.net/e87exinclc25/6Kh6zUMceXyokDjUf1iyEz/0732dc9f61a59fc5cec574d9b87cea55/alpine.jpg"}}}]},"allContentfulProjects":{"nodes":[{"id":"e930b363-9817-5bf8-a29f-86f703108cea","contentful_id":"2EzHJfiANv9IulHOu8S5is","title":"JapanimationDB","description":{"description":"A NextJS project that lets you fetch Anime data, Instagram style."},"technologies":["NEXTJS","REACTJS","KITSU-API","TAILWINDCSS"],"personalProject":true,"url":"https://japanimationdb.onrender.com/","createdAt":"2021-01-07T20:15:15.843Z","image":{"file":{"url":"//images.ctfassets.net/e87exinclc25/2LNE8YT2RZEccjJne7OK8r/e1f15a6822f505d964176c5fd41635fd/Screenshot_2022-11-29_at_7.43.30_AM.png"}}},{"id":"beb98a23-fd31-5ca5-89c2-b0cd1eacf9d8","contentful_id":"7ec5ZwBBiDQlIe1MCTSuBb","title":"Pokemon League","description":{"description":"A React/Redux project that lets you add pokemon to a lineup."},"technologies":["REACTJS","REDUX","POKE-API","MONGDB","EXPRESSJS","NODEJS"],"personalProject":true,"url":"https://pokemon-league.onrender.com/","createdAt":"2021-01-07T20:13:55.606Z","image":{"file":{"url":"//images.ctfassets.net/e87exinclc25/5kCEj7v9CHg0XVg3pzLJba/fca643e0f0d32a2d139c968f8031c327/pokemon-league.png"}}},{"id":"0474aef7-4c8e-5d43-ad61-39eca9669f65","contentful_id":"7uEFiB8Q7jqpcLimhInZGm","title":"Phoenix","description":{"description":"Phoenix HRA is used to understand and assess the effect of human behavior on system risk, thereby incorporating this into PRA with the overall goals of assessing and reducing the likelihood and consequences of errors made by humans."},"technologies":["REACTJS","MATERIAL-UI","TYPESCRIPT","MXGRAPH"],"personalProject":false,"url":"https://apps.risksciences.ucla.edu/phoenix","createdAt":"2021-01-22T21:41:26.242Z","image":null},{"id":"fafed0b6-9eae-53d2-94b1-8a8bc5cb30a9","contentful_id":"5TIqeZPnLMHDSLGFSLXzy0","title":"CoviDeS","description":{"description":"Simulation tool for exploring COVID-19 scenarios and outcomes for a given community as a function of mitigation measures and policies. Utilizes a hybrid model covering dynamic interactions of epidemiological, psychological, demographic, policy and factors."},"technologies":["RSHINY"],"personalProject":false,"url":"https://apps.risksciences.ucla.edu/infection-prediction","createdAt":"2021-01-13T20:56:31.914Z","image":null},{"id":"bdada20b-5a0c-5109-b3a8-e4cb1f717cb5","contentful_id":"1JipHOtgtcHCsmiiUdHV3H","title":"PSIM","description":{"description":"PSIM is a software platform where the pipeline operators can observe the real-time and projected health state of the pipeline and the set of suggested actions to enhance the structural integrity of the pipeline system. The platform includes three main modules: Real-Time Health Monitoring, System-Level Reliability, and Optimal Mitigation Actions. From a safety perspective, this software can prevent pipeline failures or reduces their likelihood by supporting pipeline operators in optimal decision-making and planning activities."},"technologies":["REACTJS","MATERIAL-UI","TYPESCRIPT","MXGRAPH"],"personalProject":false,"url":"https://apps.risksciences.ucla.edu/psim","createdAt":"2021-01-13T20:54:50.795Z","image":null},{"id":"0b7f964d-1647-5723-9814-42a5d02002d4","contentful_id":"2PaNtlc68fWsJB6DNA9EEO","title":"FIRE RISK WEB APP","description":{"description":"A web tool which calculates the risk of fire and danger to the population, buildings and land based on the conditions of transmission towers and their interconnecting lines."},"technologies":["REACTJS","MATERIAL-UI","TYPESCRIPT","REACT-LEAFLET"],"personalProject":false,"url":"https://apps.risksciences.ucla.edu/fire-risk","createdAt":"2021-01-13T20:52:59.142Z","image":null},{"id":"1a65d78f-bbe1-55bb-a498-2a73bc6f1764","contentful_id":"4d0mqvs3ZYy243A060Hxwi","title":"PHOENIX","description":{"description":"Phoenix HRA is used to understand and assess the effect of human behavior on system risk, thereby incorporating this into PRA with the overall goals of assessing and reducing the likelihood and consequences of errors made by humans."},"technologies":["REACTJS","MATERIAL-UI","TYPESCRIPT","MXGRAPH"],"personalProject":null,"url":"https://apps.risksciences.ucla.edu/phoenix","createdAt":"2021-01-13T20:47:56.105Z","image":null},{"id":"019b5f53-7499-5d2d-8483-ece209a6e22e","contentful_id":"5kpoC1IgtWd6gywhuxfXMR","title":"HCLA","description":{"description":"HCLA is an application used to design the system architecture and perform traditional probabilistic risk assessment (PRA) with time-to-failure models, importance measures, and uncertainty quantification."},"technologies":["REACTJS","MATERIAL-UI","TYPESCRIPT","MXGRAPH"],"personalProject":false,"url":"https://apps.risksciences.ucla.edu/hcla","createdAt":"2021-01-13T20:47:11.206Z","image":null},{"id":"dbd96149-7620-5ca2-8fb5-60a6283d87da","contentful_id":"70cswidcOfpg9h8DSxwn8N","title":"MYKUYA - PARTNER","description":{"description":"A separate app for those who want to do the on demand work for MYKUYA customers."},"technologies":["REACT-NATIVE","JAVASCRIPT"],"personalProject":false,"url":"https://play.google.com/store/apps/details?id=com.mykuyapartner","createdAt":"2021-01-13T20:46:11.947Z","image":null},{"id":"87657f9f-f7cb-54be-bd14-167d006a7879","contentful_id":"3WWQvhrauhZT6VFLsvekYy","title":"MYKUYA","description":{"description":"MyKuya is #YourHelpingHandOnDemand, providing access to trained and quality Partners to help you complete your daily tasks."},"technologies":["REACT-NATIVE","JAVASCRIPT"],"personalProject":false,"url":"https://play.google.com/store/apps/details?id=com.mykuyauserapp","createdAt":"2021-01-13T20:43:50.201Z","image":null},{"id":"0abade2c-870b-544c-b8eb-5c7d952999b6","contentful_id":"3MDSztGYhTtWB5PZNf78LK","title":"WP Timeline Theme","description":{"description":"A WordPress Timeline theme with customization."},"technologies":["BOOTSTRAP4","WORDPRESS","PHP"],"personalProject":true,"url":"https://github.com/crisnoel12/wordpress-portfolio-timeline-theme","createdAt":"2021-01-07T20:12:20.316Z","image":{"file":{"url":"//images.ctfassets.net/e87exinclc25/7EUn6aGgzz3ZHAnfVKQeKh/f2b5d6121d9e315b727283d6360630f8/wp-timeline-theme.png"}}},{"id":"53e78092-6233-51fd-8c6d-627bd4b25d2b","contentful_id":"8eI1QO8pJCmFUCgguGPP7","title":"Indulge","description":{"description":"A minimal facebook-like social media project built with laravel. Sign-up, posting and messaging capability."},"technologies":["FOUNDATION","JAVASCRIPT","LARAVEL"],"personalProject":true,"url":"https://github.com/crisnoel12/indulge-project","createdAt":"2021-01-07T20:09:12.752Z","image":{"file":{"url":"//images.ctfassets.net/e87exinclc25/1yppJd88wUUhD6tlqOFCDq/ce4720bc2aaeaaa07e1ad4abfc884a13/indulge.png"}}},{"id":"750e4d49-7447-536b-a385-6da68ba11eb0","contentful_id":"5WtChQa4lHu4s2ved3jR5s","title":"Eriazan","description":{"description":"A dermatology project showcasing clinic's products and services. Includes admin capabilities."},"technologies":["BOOTSTRAP","JAVASCRIPT","PHP","SQL"],"personalProject":true,"url":"https://github.com/crisnoel12/eriazan","createdAt":"2021-01-07T20:06:50.866Z","image":{"file":{"url":"//images.ctfassets.net/e87exinclc25/3BmvG8WbSQph1B7p5iBGyv/60c12283a0c23f476a2efbd65a8255f0/eriazan.png"}}},{"id":"a59f38fc-e714-5142-9fd2-2e80bbd264eb","contentful_id":"2vftiQIDXVDhK3IL2zdCub","title":"Card Memory Game","description":{"description":"A card memory game where user needs to match 8 cards to win."},"technologies":["JAVASCRIPT","JQUERY"],"personalProject":true,"url":"https://crisnoel12.github.io/card-memory-game","createdAt":"2021-01-07T20:05:14.932Z","image":{"file":{"url":"//images.ctfassets.net/e87exinclc25/1OJ0hcat7Qv4y3fIKbnQHw/f0b0ddae80b9404495118f2f606fe34b/card-memory-game.png"}}},{"id":"4edf5777-45ac-5573-95a6-cd274bfa60b4","contentful_id":"5VrjVkHfLAp9Wny3fLLCkp","title":"Toby","description":{"description":"A fun website built for toby the shih tzu, view his pics, videos or play against him in javascript built games."},"technologies":["JAVASCRIPT","FOUNDATION"],"personalProject":true,"url":"https://crisnoel12.github.io/toby/","createdAt":"2021-01-07T20:03:48.308Z","image":{"file":{"url":"//images.ctfassets.net/e87exinclc25/3Uq4X652zIizsg0j412ork/046903203511053d7cca0364db36a592/toby.png"}}},{"id":"7714fa88-9102-57eb-991c-7181a77c6da6","contentful_id":"6jlhsBxZDG4bCtYozGCIaU","title":"LAMP Server","description":{"description":"A vagrant + virtualbox LAMP Development starter environment with database backup capability upon vm destroy."},"technologies":["SHELL SCRIPTING","VAGRANT"],"personalProject":true,"url":"https://github.com/crisnoel12/vagrant-lamp-starter/","createdAt":"2021-01-07T20:01:39.726Z","image":{"file":{"url":"//images.ctfassets.net/e87exinclc25/2cJHqxADxBHZUccYFyeIwV/871b11ce326f5e1232f90ad328895d7c/lamp.png"}}}]},"allContentfulPost":{"nodes":[{"id":"22196632-d914-5434-b5a8-6d19e681aafe","contentful_id":"54kAihNhvJfS3ErqmeMlp3","date":"September 24th, 2017","title":"Creating a REST API with Express","slug":"creating-a-rest-api-with-express","image":{"file":{"url":"//images.ctfassets.net/e87exinclc25/5zL827z6ytGvUbSPuiqiCA/247fbe50d0ed8d97b598cdb48f546402/rest-api.png"}},"content":{"raw":"{\"nodeType\":\"document\",\"data\":{},\"content\":[{\"nodeType\":\"heading-2\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Introduction\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Express is a Node Web Framework that was created to build Web apps and APIs. In this tutorial, we’re going to look at how to create a todo API using express. Now what is a REST API? \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"REST\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" stands for (Representational State Transfer), while \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"API\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" stands for (Application Programming Interface). Basically a REST API allows developers to make \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"HTTP\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" requests to it and in return receive a response.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"heading-2\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Pre-Requisites\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"unordered-list\",\"data\":{},\"content\":[{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"A text editor\",\"marks\":[],\"data\":{}}]}]},{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Command Line / Terminal\",\"marks\":[],\"data\":{}}]}]},{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"\",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"data\":{\"uri\":\"https://nodejs.org/en/\"},\"content\":[{\"nodeType\":\"text\",\"value\":\"Node.js\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"text\",\"value\":\"\",\"marks\":[],\"data\":{}}]}]},{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"\",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"data\":{\"uri\":\"https://www.mongodb.com/\"},\"content\":[{\"nodeType\":\"text\",\"value\":\"MongoDB\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"text\",\"value\":\"\",\"marks\":[],\"data\":{}}]}]},{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"\",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"data\":{\"uri\":\"https://www.getpostman.com/\"},\"content\":[{\"nodeType\":\"text\",\"value\":\"Postman\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"text\",\"value\":\"\",\"marks\":[],\"data\":{}}]}]}]},{\"nodeType\":\"heading-2\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Directory Structure\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"This project will be nice and small. Here’s a look at the base files and folders.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"todo-api\\n|--models\\n|----todo.js\\n|--node_modules\\n|--routes\\n|----todos.js\\n|--package.json\\n|--server.js\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}]},{\"nodeType\":\"heading-2\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Project Setup\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"ordered-list\",\"data\":{},\"content\":[{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Start up MongoDB\",\"marks\":[],\"data\":{}}]}]},{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Create a directory anywhere in your computer and change directories into it.\",\"marks\":[],\"data\":{}}]}]},{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Open a up a terminal and run \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"npm init \",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"and hit enter through the prompts.\",\"marks\":[],\"data\":{}}]}]},{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Install nodemon globally. \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"npm install -g nodemon\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\". This will refresh changes to our project.\",\"marks\":[],\"data\":{}}]}]},{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Install \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"dependencies\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}}]}]}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"npm install -S express mongoose body-parser morgan cors\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"or if you prefer \",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"data\":{\"uri\":\"https://yarnpkg.com/\"},\"content\":[{\"nodeType\":\"text\",\"value\":\"Yarn\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"text\",\"value\":\":\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"yarn add express mongoose body-parser morgan cors\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}]},{\"nodeType\":\"heading-2\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Server.Js\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Create a file called server.js in your project. This file will essentially have all of our server logic hence the name server.js.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"'use strict';\\n\\n/* Packages */\\nvar express = require('express');\\nvar bodyParser = require('body-parser');\\nvar logger = require('morgan');\\nvar mongoose = require('mongoose');\\nvar cors = require('cors');\\nvar port = process.env.PORT || 8080;\\nvar app = express();\\n\\n/* Connect to Mongo */\\nmongoose.connect(\\\"mongodb://localhost:27017/todos\\\");\\nvar db = mongoose.connection;\\ndb.on(\\\"error\\\", function (err) {\\n    console.error(\\\"\\\\x1b[31m%s\\\\x1b[0m\\\", \\\"Connection error:\\\", err);\\n});\\ndb.once(\\\"open\\\", function () {\\n    console.log(\\\"\\\\x1b[36m%s\\\\x1b[0m\\\", \\\"Connected to Mongo\\\");\\n});\\n\\n/* Middleware */\\napp.use(logger(\\\"dev\\\")); // logs http requests in console\\napp.use(bodyParser.json()); // enables us to get data from a post request\\n\\n// catch 404 and forward to error handler\\napp.use(function (req, res, next) {\\n    var err = new Error(\\\"Not Found\\\");\\n    err.status = 404;\\n    next(err);\\n});\\n\\n// Error handler\\napp.use(function (err, req, res, next) {\\n    res.status(err.status || 500);\\n    res.json({\\n        error: {\\n            message: err.message\\n        }\\n    });\\n});\\n\\n// Start Server\\napp.listen(port, function () {\\n    console.log(\\\"\\\\x1b[36m%s\\\\x1b[0m\\\", \\\"Server up and running on port:\\\", port);\\n});\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Just with any node project, we require our dependencies that we installed earlier at the top of the file. Next we connect to our local MongoDB service and append the name of the database we want to create which is \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"/todos\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\".\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Now, in your terminal run: \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"nodemon server.js\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\". Make sure you are running MongoDB in the background or else you might receive a console error in your terminal. If everything went smoothly, you should see:\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Server up and running on port: 8080\\nConnected to Mongo\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"at the end of your console.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Notice the \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"app.use()\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" methods in the file. These are express’ middleware. They handle events and routes when triggered. Later we will add our \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"todos routes middleware\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" into the mix so we can \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"create, read, update and delete todos\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\".\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Lastly we have the \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"app.listen()\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" method, this basically starts our server at a given port. We set it to the node environment’s port \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"or\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" port 8080. You can visit \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"localhost:8080\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" in your browser, you should see an error message saying \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"not found\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\". We have not set any routes in the root of the server, that’s why it defaulted to use the \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"404\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" middleware.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"heading-2\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Creating Our Todo Model\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"In your project directory create a folder called \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"Models\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" and then a file called \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"Todo.js\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" within it. This file will shape how we want our todos to look. We want a \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"title, status and creation_date\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" for every todo. We’ll use the \",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"data\":{\"uri\":\"http://mongoosejs.com/docs/guide.html\"},\"content\":[{\"nodeType\":\"text\",\"value\":\"mongoose\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"text\",\"value\":\" package to help us achieve this.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"heading-3\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Models/Todo.Js\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"'use strict';\\n\\nvar mongoose = require(\\\"mongoose\\\");\\nvar Schema = mongoose.Schema;\\n\\nvar TodoSchema = new Schema({\\n    title: {\\n        type: String,\\n        required: true,\\n        trim: true\\n    },\\n    status: {\\n        type: Boolean,\\n        required: true,\\n        default: false\\n    },\\n    creation_date: { \\n        type: Date,\\n        required: true, \\n        default: Date.now \\n    }\\n});\\n\\nvar Todo = mongoose.model('Todo', TodoSchema);\\nmodule.exports = Todo; // export `Todo` variable to be available for other files\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}]},{\"nodeType\":\"heading-2\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Todo Routes\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Now is the time to create our routes and test our endpoints. We’ll be using Express’ router to help us. When we send a \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"GET\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" request to \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"localhost:8080/api/todos\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\", our goal is to get a list of all the todos from the todos database in json form. When we send a \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"POST\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" request to the same endpoint, we want to create a new todo from a parsed json object. Here’s a table to better illustrate what we’re trying to accomplish.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"embedded-asset-block\",\"data\":{\"target\":{\"sys\":{\"id\":\"2RY14RAMNflLhSRlVn0AjF\",\"type\":\"Link\",\"linkType\":\"Asset\"}}},\"content\":[]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Create a routes folder, then create a file named Todos.js inside.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"heading-3\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Routes/Todos.Js\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"\\\"use strict\\\";\\n\\nvar express = require(\\\"express\\\");\\nvar router = express.Router();\\nvar mongoose = require('mongoose');\\n\\nvar Todo = require(\\\"../models/todo\\\");\\n\\nrouter.get('/', function(req, res, next) {\\n    res.json({message: 'API working!'})\\n});\\n\\nmodule.exports = router; // export `router` variable to be available for other files\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Import the \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"routes/todos.js\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" file near top of server.js file.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"heading-3\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Server.Js\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"var todosRoute = require('./routes/todos.js');\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Add a todos route middleware at \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"/api/todos\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" just above the 404 error handler.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"// Register 'todos' Route\\napp.use(\\\"/api/todos\\\", todosRoute);\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Notice how we’re using \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"/api/todos\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" in the route middleware and then passing the \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"todosRoute\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" that we imported. All the routes that we define in the \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"Routes/todos.js\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" will be based on \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"/api/todos\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\". So routes referencing \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"\\\"/\\\"\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" in \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"Routes/todos.js\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" will go to \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"/api/todos (localhost:8080/api/todos)\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\".\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"heading-2\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Postman\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Open up postman. Postman will help us test HTTP verbs that aren’t supported by browsers by default. Now in Postman’s url bar go to \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"localhost:8080/api/todos\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\", make sure the HTTP verb is set to \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"GET\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" and press send. You should see something like this.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"embedded-asset-block\",\"data\":{\"target\":{\"sys\":{\"id\":\"2LjmCJ4VdzKy8OadwrI9KI\",\"type\":\"Link\",\"linkType\":\"Asset\"}}},\"content\":[]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Let’s actually get some real todo data up in here. First let’s create a post method.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"heading-3\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Routes/Todos.Js\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"router.post('/', function(req, res, next) {\\n    var todo = new Todo(req.body);\\n    todo.save(function(err, todo) {\\n        if (err) return next(err);\\n        res.status(201);\\n        res.json({message: \\\"Todo Created!\\\", todo: todo});\\n    });\\n});\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Now let’s add our first todo! Change the HTTP Verb from \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"GET\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" to \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"POST\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\". Click the \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"body\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" tab, select the \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"raw\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" radio button and select \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"JSON(application/json)\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" from the dropdown. Let’s set \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"Mow the lawn\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" as our first todo. Since our \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"Todo Model\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" has default fields for the creation date and status, we only need to supply the title field. In the textarea below the radio buttons enter a json object for the todo like so.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"embedded-asset-block\",\"data\":{\"target\":{\"sys\":{\"id\":\"1YBVPaVkv7OGEWKsI89jiV\",\"type\":\"Link\",\"linkType\":\"Asset\"}}},\"content\":[]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Add another todo, Get \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"a haircut\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" just for kicks.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Let’s change our get \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"all todos\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" method to retrieve all of our todos.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"heading-3\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Routes/Todos.Js\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"router.get('/', function(req, res, next) {\\n    Todo.find(function(err, todos){\\n        if (err) return next(err);\\n        res.json(todos);\\n    });\\n});\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Test with postman, change HTTP verb back to \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"GET\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\", make sure url is \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"localhost:8080/api/todos\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" and press send. We should get back two total todos: \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"Mow the lawn\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" and \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"Get a haircut\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\".\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"heading-2\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Get Single Todo\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"We have three more actions to finish. All three will use the \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"id\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" params. Thankfully, Mongo automatically creates an \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"id\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" field for each todo document of type \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"ObjectId\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\".\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"router.get('/:id', function(req, res, next) {\\n    var id = mongoose.Types.ObjectId(req.params.id); // cast id param to ObjectId\\n    Todo.findById(id, function (err, todo) {\\n        if (err) return next(err);\\n        if (!todo) { \\n            err = new Error(\\\"Todo Not Found\\\"); \\n            err.status = 404; \\n            return next(err); \\n        } // if todo doesn't exist, set err\\n        res.json(todo);\\n    });\\n});\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"In Postman, copy the \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"id\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" value for \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"Mow the lawn\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" and append it to the url to check.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"heading-2\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Update Todo\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"We’ll use the \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"PUT\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" method to update our todos. Within that we’ll use the \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"findByIdAndUpdate\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" mongoose method. This will allow us to return the new todo in the response with the use of the \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"{ new: true }\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" parameter. We’ll also set the \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"validators\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" to true so users can’t enter a null todo.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"router.put('/:id', function (req, res, next) {\\n    Todo.findByIdAndUpdate(\\n        req.params.id, \\n        req.body, \\n        { \\n            new: true, \\n            runValidators: true \\n        }, function (err, todo) {\\n            if (err) return next(err);\\n            if (!todo) { \\n                err = new Error(\\\"Todo Not Found\\\"); \\n                err.status = 404; \\n                return next(err);\\n            }\\n        }\\n        res.json({ message: \\\"Todo updated!\\\", todo: todo });\\n    });\\n});\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Change the HTTP verb in Postman to \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"PUT\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\". Make sure url is at \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"localhost:8080/api/todos/[id-of-mow-the-lawn]\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\". Now just like the \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"post\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" method we’re going to go the body tab, select raw and select JSON(application/json) from the dropdown. Let’s update \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"Mow the lawn\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"’s status to true, meaning we’ve completed the todo. In the textarea, type a json object with status equaling true.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"{\\n    \\\"status\\\": true\\n}\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}]},{\"nodeType\":\"heading-2\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Delete Todo\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Finally, for our last HTTP operation, we’ll set up a delete route. We can use \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"mongoose’s\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" remove method to achieve deleting a todo from the database.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"router.delete('/:id', function (req, res, next) {\\n    Todo.findById(req.params.id, function (err, todo) {\\n        if (err) return next(err);\\n        if (!todo) { \\n            err = new Error(\\\"Todo Not Found\\\"); \\n            err.status = 404; \\n            return next(err); \\n        }\\n        todo.remove(function(err) {\\n            if (err) return next(err);\\n            res.json({message: \\\"Todo deleted!\\\"});\\n        })\\n    });\\n});\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}]},{\"nodeType\":\"heading-2\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Conclusion\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"And just like that, we have a RESTful API up and running. In order for other domains to interact and fetch data from this API we will have to enable the \",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"data\":{\"uri\":\"https://github.com/expressjs/cors\"},\"content\":[{\"nodeType\":\"text\",\"value\":\"cors\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"text\",\"value\":\" package. CORS stands for \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"Cross-Origin Resource Sharing\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\". Domains, by default don’t allow other domains to fetch their data, we can remedy this by enabling cors to specific routes or all routes. We will tackle this in a future blog post with React.js.\",\"marks\":[],\"data\":{}}]}]}"}},{"id":"690ebec7-5f08-5adc-834e-42fea6cceccf","contentful_id":"4b5XIb3TxmCuO6oby8RYFH","date":"March 29th, 2017","title":"MongoDB For Beginners","slug":"mongo-db-for-beginners","image":{"file":{"url":"//images.ctfassets.net/e87exinclc25/QJCNkJk56B1wwIHFR4sKG/bf1a1ad0c957feace25a2c35458bc93d/mongodb-for-beginners.png"}},"content":{"raw":"{\"nodeType\":\"document\",\"data\":{},\"content\":[{\"nodeType\":\"heading-2\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Introduction\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"MongoDB is a popular NoSQL database. It is usually the go to database for node apps since all the data stored in Mongo is formatted in JSON, it’s the perfect pairing to be able to use javascript in both the server and database. We’ll learn the basics of Mongo as well as how to use a GUI client.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"heading-2\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Installation\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"First off, let’s \",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"data\":{\"uri\":\"https://www.mongodb.com/download-center?jmp=nav#community\"},\"content\":[{\"nodeType\":\"text\",\"value\":\"download MongoDB\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"text\",\"value\":\" and install it on our machine. If you’re using a Mac, \",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"data\":{\"uri\":\"https://brew.sh/\"},\"content\":[{\"nodeType\":\"text\",\"value\":\"homebrew\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"text\",\"value\":\" would be the best option to install it. Next, follow the following \",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"data\":{\"uri\":\"https://docs.mongodb.com/manual/administration/install-community/\"},\"content\":[{\"nodeType\":\"text\",\"value\":\"instructions\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"text\",\"value\":\" to make Mongo work on your corresponding operating system.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"heading-2\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Starting Up Mongo\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"If you followed the instructions to a T, you should be able to start the Mongo daemon. Open a command line and type in:\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"mongod\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"You can end the process with \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"ctrl+c\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\".\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"If you decided to install the MongoDB service, refer to the \",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"data\":{\"uri\":\"https://docs.mongodb.com/manual/administration/install-community/\"},\"content\":[{\"nodeType\":\"text\",\"value\":\"instructions\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"text\",\"value\":\" for your OS again to see how to start Mongo.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"heading-2\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Mongo Shell\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Now, we’ll use the Mongo shell to create and manage our databases. Open up a new instance of your command line, make sure you still have the daemon running, then type the following to enter the shell.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"mongo\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}]},{\"nodeType\":\"heading-2\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Creating A Database\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"If all goes well, let’s create our first database! Don’t worry, the command is only two words, we’ll create a database for a made up startup called \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"SynthraTech\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\". In the same command line where you logged into the shell, enter:\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"use SynthraTech;\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"With the \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"use\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" command we can create and switch to a database. If ever you need to see which database you’re currently on just type \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"db\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\".\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"heading-2\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Creating A Collection\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"If you’re familiar with MySQL, think of \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"collections\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" as the equivalent of a table. The rows in the table are reffered to as \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"documents\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" in Mongo. Let’s create a collection for our users.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"db.createCollection('users');\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"You should recieve an \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"“ok”\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" message, let’s double check by running \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"show collections;\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\".\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"heading-2\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Inserting A Document Into Collection\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"What’s a users collection without any users. Let’s add two.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"db.users.insert({ \\\"first_name\\\": \\\"John\\\", \\\"last_name\\\": \\\"Doe\\\" });db.users.insert({ \\\"first_name\\\": \\\"Carlos\\\", \\\"middle_name\\\": \\\"Ray\\\", \\\"last_name\\\": \\\"Norris\\\" });\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Notice how we have a middle name for the second user but not the first. This is one advantage of NoSQL, the ability to have whatever data you want in various documents, you don’t have to structure your collections in any way.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Every document created, receives a random id field. To view all the user document’s info, run:\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"db.users.find();\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"You can add \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\".pretty()\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" after the \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"find\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" method to recieve a better looking output.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"heading-2\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Updating A Document\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"When updating data, you want to make sure you select it using a unique identifier. Let’s use the id that Mongo created for us, run \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"db.users.find()\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" and copy \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"John Doe’s\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"_id\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" value. Let’s update the user \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"John Doe\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" and change his first name to \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"Jack\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\". Run the following command to change John’s name. Be sure to use the _id value that you copied earlier instead of the one shown below.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"db.users.update({ \\\"_id\\\": ObjectId(\\\"58da68d9bd9ad44b1a931db2\\\") }, { $set: { \\\"first_name\\\": \\\"Jack\\\" } });\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}]},{\"nodeType\":\"heading-3\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Removing A Field\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Let’s say we no longer want to include middle names as part of our user’s collection, let’s remove \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"Carlos Norris’\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" middle name like so.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"db.users.update({ \\\"_id\\\" : ObjectId(\\\"58da68f7bd9ad44b1a931db3\\\") }, { $unset: { \\\"middle_name\\\": 1 } });\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"We can also omit the id selector and get the same affect.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"db.users.update({}, { $unset: { \\\"middle_name\\\": 1 } });\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"This will select all the users, instead of just \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"Carlos\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\".\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"heading-2\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Deleting A Document\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"To delete a document, we can use the \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"remove\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" method. Just like update, we need to pass in a unique identifier. Let’s delete \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"Carlos\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" and use his \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"_id\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\".\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"db.users.remove({ \\\"_id\\\" : ObjectId(\\\"58da68f7bd9ad44b1a931db3\\\") });\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"To remove all users, omit the selector.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"db.users.remove({});\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}]},{\"nodeType\":\"heading-2\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Managing Your Databases\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"To view a list of created Databases, you can run \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"show dbs;\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\". You should see \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"SynthraTech\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" as well as \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"admin\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" and \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"local\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" which were created upon the MongoDB installation.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Finally we’ll learn how to drop a database. Before dropping a database, make sure it’s currently in use. We can confirm this by running \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"db\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\". Once confirmed, we can drop \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"SyntrhaTech\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" with this command: \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"db.dropDatabase();\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\". Run \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"show dbs;\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" to confirm the drop.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"heading-2\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Robomongo GUI\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"If you’re not into using a command line, \",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"data\":{\"uri\":\"https://robomongo.org/\"},\"content\":[{\"nodeType\":\"text\",\"value\":\"Robomongo\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"text\",\"value\":\" is a great GUI alternative. Once you have it installed you’ll need to set up a connection. Go to \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"File > Connect > Create\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\". It should look something like this:\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"embedded-asset-block\",\"data\":{\"target\":{\"sys\":{\"id\":\"44sg2io9WY0eJ8YUl1Witg\",\"type\":\"Link\",\"linkType\":\"Asset\"}}},\"content\":[]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"You can name it whatever you would like, but make sure the \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"address\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" is at localhost and the \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"port\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" is 27017. Now save and connect, make sure the \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"Mongo Daemon\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" is running before connecting.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"heading-2\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Conclusion\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"In this tutorial, we learned all the basics of Mongo, from create, read, update and delete. If you would like to learn more you can always visit \",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"data\":{\"uri\":\"https://www.mongodb.com/\"},\"content\":[{\"nodeType\":\"text\",\"value\":\"Mongo’s official website\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"text\",\"value\":\".\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"\",\"marks\":[],\"data\":{}}]}]}"}},{"id":"60386408-21fb-544c-8d6f-88f0e3b17467","contentful_id":"19mlO6vG7izSZlQWIxUKnx","date":"February 28th, 2017","title":"Getting Started With Node.js","slug":"getting-started-with-node-js","image":{"file":{"url":"//images.ctfassets.net/e87exinclc25/24SrRpnCLUvf1xfbyugyNN/24db1c6b4291bf4673e070a5724a447e/nodejs-getting-started.png"}},"content":{"raw":"{\"nodeType\":\"document\",\"data\":{},\"content\":[{\"nodeType\":\"heading-2\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Introduction\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Node is a javascript runtime environment that was built on top of google chrome’s V8 engine. It can be used to build many different things such as web and desktop apps, APIs, real-time applications, games, it can even act as a web server. In this lesson we’ll get into the basics of Node and NPM (Node Package Manager). NPM will help us install different modules used in modern javascript development.\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"heading-2\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Pre-Requisites\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"unordered-list\",\"content\":[{\"nodeType\":\"list-item\",\"content\":[{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"A text editor\",\"marks\":[],\"data\":{}}],\"data\":{}}],\"data\":{}},{\"nodeType\":\"list-item\",\"content\":[{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Some knowledge in javascript\",\"marks\":[],\"data\":{}}],\"data\":{}}],\"data\":{}},{\"nodeType\":\"list-item\",\"content\":[{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"A command line application and a \",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"content\":[{\"nodeType\":\"text\",\"value\":\"basic understanding of how to use it\",\"marks\":[],\"data\":{}}],\"data\":{\"uri\":\"https://crisnoel12.github.io/blog/introduction-to-the-command-line\"}},{\"nodeType\":\"text\",\"value\":\".\",\"marks\":[],\"data\":{}}],\"data\":{}}],\"data\":{}},{\"nodeType\":\"list-item\",\"content\":[{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"And of course, you need to have \",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Node.js installed\",\"marks\":[],\"data\":{}}],\"data\":{\"uri\":\"https://nodejs.org/en/\"}},{\"nodeType\":\"text\",\"value\":\".\",\"marks\":[],\"data\":{}}],\"data\":{}}],\"data\":{}}],\"data\":{}},{\"nodeType\":\"heading-2\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Setup\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"First, let’s create a folder in the desktop directory or any directory that you prefer. We’ll name it \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"node-intro\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\".\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"mkdir node-intro\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Then, cd into that directory and run \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"npm init\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\". It will prompt you to enter some information regarding the project information. For this tutorial it isn’t important so let’s just enter through it.\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Once you’ve gone through all the prompts, you should notice a \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"package.json\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" file was created in \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"node-intro\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\". This file holds all the information that you would of entered in the previous step, along with the list of npm packages you will install, which we’ll get into later.\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"heading-2\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Using NPM\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"NPM is a CLI tool that will help us manage javascript packages necessary for various projects. We’ll go through installing, updating, uninstalling and listing packages.\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"heading-3\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Installing Packages\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"npm install <package-name>\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"There are 3 different flags we can append to the end of the install command to save them in different locations:\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"unordered-list\",\"content\":[{\"nodeType\":\"list-item\",\"content\":[{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Global Flag (-g) - \",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"Packages that you tend to use in multiple projects. Can be used in any directory you’re in. Will save in your global packages list.\",\"marks\":[],\"data\":{}}],\"data\":{}}],\"data\":{}},{\"nodeType\":\"list-item\",\"content\":[{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Save Flag (-S) - \",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"Packages that your project depends on to function. Will save in your project’s package.json file under \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"dependencies\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\". Will be used in production environment.\",\"marks\":[],\"data\":{}}],\"data\":{}}],\"data\":{}},{\"nodeType\":\"list-item\",\"content\":[{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Dev Dependency Flag (-D) - \",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"Packages that your project doesn’t depend on to function. Will save in package.json file under \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"devDependecies\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\". Won’t be used in production environment.\",\"marks\":[],\"data\":{}}],\"data\":{}}],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"*These flags can be used for update and uninstall as well, depending on the package you’re targeting.\",\"marks\":[{\"type\":\"italic\"}],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Using the CLI inside the \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"node-intro\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" directory, let’s install 3 different packages using the optional flags:\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"heading-4\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Nodemon\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"A utility that restarts server upon code change.\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"npm install nodemon -g\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}],\"data\":{}},{\"nodeType\":\"heading-4\",\"content\":[{\"nodeType\":\"text\",\"value\":\"\\nExpress\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"A node web framework.\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"npm install express -S\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}],\"data\":{}},{\"nodeType\":\"heading-4\",\"content\":[{\"nodeType\":\"text\",\"value\":\"\\nWebpack\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"A front-end module bundler\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"npm install nodemon -D\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"After installing \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"express\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" and \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"webpack\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\", you should notice a \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"node_modules\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" folder was created. This holds the express and webpack packages along with their dependencies. Your packages.json should be updated as well and look like this:\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"{\\n  \\\"name\\\": \\\"node\\\",\\n  \\\"version\\\": \\\"1.0.0\\\",\\n  \\\"description\\\": \\\"\\\",\\n  \\\"main\\\": \\\"index.js\\\",\\n  \\\"scripts\\\": {\\n    \\\"test\\\": \\\"echo \\\\\\\"Error: no test specified\\\\\\\" && exit 1\\\"\\n  },\\n  \\\"author\\\": \\\"\\\",\\n  \\\"license\\\": \\\"ISC\\\",\\n  \\\"dependencies\\\": {\\n    \\\"express\\\": \\\"^4.14.1\\\"\\n  },\\n  \\\"devDependencies\\\": {\\n    \\\"webpack\\\": \\\"^2.2.1\\\"\\n  }}\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"A cool little tidbit with the package.json file. When sharing your project with colleagues through github, you generally dont want to include the node_modules folder since it can be quite large in file size. So how do your colleagues install all those packages that could total a dozen? As long as you uploaded the package.json file and saved the packages to the appropriate dependencies, then all they need to do is clone the project and run one command: \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"npm install\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\". It can save time and finger muscle fatigue.\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"heading-3\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Updating Packages\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"npm update <package-name>\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"To view your project’s outdated packages, run: \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"npm outdated\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\".\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"heading-3\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Uninstalling Packages\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"npm uninstall <package-name>\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"To remove packages from package.json file, append the necessary flags.\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"heading-3\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Listing Packages\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"npm list --depth=0\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"When listing packages, npm will list \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"ALL\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" the packages in the node_modules or global repository, add the \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"depth\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" flag and set it to \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"0\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" to view only the top level packages. To view global packages, append the \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"-g\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" flag.\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"heading-2\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Using Node\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"heading-3\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Running Javascript Files\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"With node we can run javascript files and see the output right in CLI. In the \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"node-intro\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" folder, create a new file called \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"app.js\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\". Let’s output a simple \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"Hello World!\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" message.\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"console.log(\\\"Hello World!\\\");\\n\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Now run:\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"node app.js\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"We should see \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"Hello World!\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" printed in the CLI.\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"heading-3\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Creating A Web Server\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"If you want to run a web server, node can do that too. Let’s create another file called \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"server.js\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" and paste in this code:\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"var http = require('http');var port = 8000;\\n\\nvar server = http.createServer(function (req, res) {\\n\\n  /*\\n    Response: plain text\\n  */\\n  res.writeHead(200, {'Content-Type': 'text/plain'});\\n  res.write(\\\"Hello World!\\\");\\n  res.end();\\n\\n}).listen(port);\\n\\nconsole.log(\\\"Server running on port \\\" + port);\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}],\"data\":{}},{\"nodeType\":\"heading-4\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Install Http\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Notice that we’re requiring the \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"http\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" package. Let’s install that with \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"NPM\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\".\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"heading-4\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Create Web Server\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"To use the http package as a web server, we set a variable called \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"server\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" and set it equal to the \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"createServer\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" method of http. Within that, we insert a callback function with two parameters: \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"req\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" and \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"res\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" (req standing for \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"request\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" and res standing for \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"response\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"). Since we don’t have routes set up for this example, the req and res data will be reflected once a http request is made to \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"localhost:8000\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\".\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"heading-4\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Fill With Response Data\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Inside the \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"server\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" callback function we call the res object and call on methods to set various data. We use \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"writeHead\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" to send a header with type of \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"text/plain\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" along with a 200 http status code. With the \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"write\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" method we can add any text we want to the document’s body. The \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"end\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" method will close the body, without this, the document won’t load.\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"heading-4\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Listen Function\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"The final piece to the puzzle is the listen function, we pass it the port number from line 2. So when a request is made to \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"localhost:8000\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\", the response data inside the server object will fire off.\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"heading-3\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Starting The Web Server\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"We’re ready to run the web server. Run \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"node server.js\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" in the CLI. It should display \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"Server running on port 8000\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\".\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Now open a web browser of your choice and enter \",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"content\":[{\"nodeType\":\"text\",\"value\":\"http://localhost:8000\",\"marks\":[],\"data\":{}}],\"data\":{\"uri\":\"http://localhost:8000/\"}},{\"nodeType\":\"text\",\"value\":\" in the address bar. If all goes to plan, you should see \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"Hello World!\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" printed out again, this time in the browser.\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"To stop the server, press \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"ctrl + c\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" in the CLI.\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"heading-2\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Conclusion\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Through the end of this tutorial, we’ve learned how to \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"install\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\", \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"update\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\", \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"uninstall\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" and \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"list\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" packages with NPM. We’ve covered the basics, but you can learn more at the \",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"content\":[{\"nodeType\":\"text\",\"value\":\"npm docs\",\"marks\":[],\"data\":{}}],\"data\":{\"uri\":\"https://docs.npmjs.com/\"}},{\"nodeType\":\"text\",\"value\":\" or if you want to look through the \",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"content\":[{\"nodeType\":\"text\",\"value\":\"most popular packages\",\"marks\":[],\"data\":{}}],\"data\":{\"uri\":\"https://www.npmjs.com/browse/star\"}},{\"nodeType\":\"text\",\"value\":\". With node, we’ve learned how to process a javascript file through the CLI, as well as create a simple web server.\",\"marks\":[],\"data\":{}}],\"data\":{}}]}"}}]}},"pageContext":{}},"staticQueryHashes":[],"slicesMap":{}}