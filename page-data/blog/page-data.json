{"componentChunkName":"component---src-pages-blog-tsx","path":"/blog/","result":{"data":{"allContentfulPost":{"nodes":[{"id":"22196632-d914-5434-b5a8-6d19e681aafe","contentful_id":"54kAihNhvJfS3ErqmeMlp3","date":"September 24th, 2017","title":"Creating a REST API with Express","slug":"creating-a-rest-api-with-express","image":{"file":{"url":"//images.ctfassets.net/e87exinclc25/5zL827z6ytGvUbSPuiqiCA/247fbe50d0ed8d97b598cdb48f546402/rest-api.png"}},"content":{"raw":"{\"nodeType\":\"document\",\"data\":{},\"content\":[{\"nodeType\":\"heading-2\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Introduction\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Express is a Node Web Framework that was created to build Web apps and APIs. In this tutorial, we’re going to look at how to create a todo API using express. Now what is a REST API? \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"REST\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" stands for (Representational State Transfer), while \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"API\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" stands for (Application Programming Interface). Basically a REST API allows developers to make \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"HTTP\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" requests to it and in return receive a response.\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"heading-2\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Pre-Requisites\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"unordered-list\",\"content\":[{\"nodeType\":\"list-item\",\"content\":[{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"A text editor\",\"marks\":[],\"data\":{}}],\"data\":{}}],\"data\":{}},{\"nodeType\":\"list-item\",\"content\":[{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Command Line / Terminal\",\"marks\":[],\"data\":{}}],\"data\":{}}],\"data\":{}},{\"nodeType\":\"list-item\",\"content\":[{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"\",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Node.js\",\"marks\":[],\"data\":{}}],\"data\":{\"uri\":\"https://nodejs.org/en/\"}},{\"nodeType\":\"text\",\"value\":\"\",\"marks\":[],\"data\":{}}],\"data\":{}}],\"data\":{}},{\"nodeType\":\"list-item\",\"content\":[{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"\",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"content\":[{\"nodeType\":\"text\",\"value\":\"MongoDB\",\"marks\":[],\"data\":{}}],\"data\":{\"uri\":\"https://www.mongodb.com/\"}},{\"nodeType\":\"text\",\"value\":\"\",\"marks\":[],\"data\":{}}],\"data\":{}}],\"data\":{}},{\"nodeType\":\"list-item\",\"content\":[{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"\",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Postman\",\"marks\":[],\"data\":{}}],\"data\":{\"uri\":\"https://www.getpostman.com/\"}},{\"nodeType\":\"text\",\"value\":\"\",\"marks\":[],\"data\":{}}],\"data\":{}}],\"data\":{}}],\"data\":{}},{\"nodeType\":\"heading-2\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Directory Structure\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"This project will be nice and small. Here’s a look at the base files and folders.\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"todo-api\\n|--models\\n|----todo.js\\n|--node_modules\\n|--routes\\n|----todos.js\\n|--package.json\\n|--server.js\\n\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}],\"data\":{}},{\"nodeType\":\"heading-2\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Project Setup\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"ordered-list\",\"content\":[{\"nodeType\":\"list-item\",\"content\":[{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Start up MongoDB\",\"marks\":[],\"data\":{}}],\"data\":{}}],\"data\":{}},{\"nodeType\":\"list-item\",\"content\":[{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Create a directory anywhere in your computer and change directories into it.\",\"marks\":[],\"data\":{}}],\"data\":{}}],\"data\":{}},{\"nodeType\":\"list-item\",\"content\":[{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Open a up a terminal and run \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"npm init \",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"and hit enter through the prompts.\",\"marks\":[],\"data\":{}}],\"data\":{}}],\"data\":{}},{\"nodeType\":\"list-item\",\"content\":[{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Install nodemon globally. \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"npm install -g nodemon\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\". This will refresh changes to our project.\",\"marks\":[],\"data\":{}}],\"data\":{}}],\"data\":{}},{\"nodeType\":\"list-item\",\"content\":[{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Install \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"dependencies\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}}],\"data\":{}}],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"npm install -S express mongoose body-parser morgan cors\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"or if you prefer \",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Yarn\",\"marks\":[],\"data\":{}}],\"data\":{\"uri\":\"https://yarnpkg.com/\"}},{\"nodeType\":\"text\",\"value\":\":\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"yarn add express mongoose body-parser morgan cors\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}],\"data\":{}},{\"nodeType\":\"heading-2\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Server.Js\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Create a file called server.js in your project. This file will essentially have all of our server logic hence the name server.js.\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"'use strict';\\n\\n/* Packages */var express = require('express');var bodyParser = require('body-parser');var logger = require('morgan');var mongoose = require('mongoose');var cors = require('cors');var port = process.env.PORT || 8080;var app = express();\\n\\n/* Connect to Mongo */\\nmongoose.connect(\\\"mongodb://localhost:27017/todos\\\");var db = mongoose.connection;\\ndb.on(\\\"error\\\", function (err) {\\n    console.error(\\\"\\\\x1b[31m%s\\\\x1b[0m\\\", \\\"Connection error:\\\", err);});\\ndb.once(\\\"open\\\", function () {\\n    console.log(\\\"\\\\x1b[36m%s\\\\x1b[0m\\\", \\\"Connected to Mongo\\\");});\\n\\n/* Middleware */\\napp.use(logger(\\\"dev\\\")); // logs http requests in console\\napp.use(bodyParser.json()); // enables us to get data from a post request\\n\\n// catch 404 and forward to error handler\\napp.use(function (req, res, next) {\\n    var err = new Error(\\\"Not Found\\\");\\n    err.status = 404;\\n    next(err);});\\n\\n// Error handler\\napp.use(function (err, req, res, next) {\\n    res.status(err.status || 500);\\n    res.json({\\n        error: {\\n            message: err.message\\n        }\\n    });});\\n\\n// Start Server\\napp.listen(port, function () {\\n    console.log(\\\"\\\\x1b[36m%s\\\\x1b[0m\\\", \\\"Server up and running on port:\\\", port);});\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Just with any node project, we require our dependencies that we installed earlier at the top of the file. Next we connect to our local MongoDB service and append the name of the database we want to create which is \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"/todos\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\".\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Now, in your terminal run: \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"nodemon server.js\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\". Make sure you are running MongoDB in the background or else you might receive a console error in your terminal. If everything went smoothly, you should see:\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Server up and running on port: 8080\\nConnected to Mongo\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"at the end of your console.\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Notice the \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"app.use()\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" methods in the file. These are express’ middleware. They handle events and routes when triggered. Later we will add our \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"todos routes middleware\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" into the mix so we can \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"create, read, update and delete todos\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\".\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Lastly we have the \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"app.listen()\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" method, this basically starts our server at a given port. We set it to the node environment’s port \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"or\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" port 8080. You can visit \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"localhost:8080\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" in your browser, you should see an error message saying \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"not found\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\". We have not set any routes in the root of the server, that’s why it defaulted to use the \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"404\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" middleware.\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"heading-2\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Creating Our Todo Model\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"In your project directory create a folder called \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"Models\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" and then a file called \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"Todo.js\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" within it. This file will shape how we want our todos to look. We want a \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"title, status and creation_date\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" for every todo. We’ll use the \",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"content\":[{\"nodeType\":\"text\",\"value\":\"mongoose\",\"marks\":[],\"data\":{}}],\"data\":{\"uri\":\"http://mongoosejs.com/docs/guide.html\"}},{\"nodeType\":\"text\",\"value\":\" package to help us achieve this.\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"heading-3\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Models/Todo.Js\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"'use strict';\\n\\nvar mongoose = require(\\\"mongoose\\\");var Schema = mongoose.Schema;\\n\\nvar TodoSchema = new Schema({\\n    title: {\\n        type: String,\\n        required: true,\\n        trim: true\\n    },\\n    status: {\\n        type: Boolean,\\n        required: true,\\n        default: false\\n    },\\n    creation_date: { \\n        type: Date,\\n        required: true, \\n        default: Date.now \\n    }});\\n\\nvar Todo = mongoose.model('Todo', TodoSchema);\\nmodule.exports = Todo; // export `Todo` variable to be available for other files\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}],\"data\":{}},{\"nodeType\":\"heading-2\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Todo Routes\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Now is the time to create our routes and test our endpoints. We’ll be using Express’ router to help us. When we send a \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"GET\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" request to \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"localhost:8080/api/todos\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\", our goal is to get a list of all the todos from the todos database in json form. When we send a \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"POST\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" request to the same endpoint, we want to create a new todo from a parsed json object. Here’s a table to better illustrate what we’re trying to accomplish.\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"embedded-asset-block\",\"content\":[],\"data\":{\"target\":{\"sys\":{\"id\":\"2RY14RAMNflLhSRlVn0AjF\",\"type\":\"Link\",\"linkType\":\"Asset\"}}}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Create a routes folder, then create a file named Todos.js inside.\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"heading-3\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Routes/Todos.Js\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"\\\"use strict\\\";\\n\\nvar express = require(\\\"express\\\");var router = express.Router();var mongoose = require('mongoose');\\n\\nvar Todo = require(\\\"../models/todo\\\");\\n\\nrouter.get('/', function(req, res, next) {\\n    res.json({message: 'API working!'})});\\n\\nmodule.exports = router; // export `router` variable to be available for other files\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Import the \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"routes/todos.js\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" file near top of server.js file.\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"heading-3\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Server.Js\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"var todosRoute = require('./routes/todos.js');\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Add a todos route middleware at \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"/api/todos\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" just above the 404 error handler.\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"// Register 'todos' Route\\napp.use(\\\"/api/todos\\\", todosRoute);\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Notice how we’re using \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"/api/todos\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" in the route middleware and then passing the \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"todosRoute\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" that we imported. All the routes that we define in the \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"Routes/todos.js\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" will be based on \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"/api/todos\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\". So routes referencing \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"\\\"/\\\"\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" in \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"Routes/todos.js\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" will go to \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"/api/todos (localhost:8080/api/todos)\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\".\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"heading-2\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Postman\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Open up postman. Postman will help us test HTTP verbs that aren’t supported by browsers by default. Now in Postman’s url bar go to \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"localhost:8080/api/todos\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\", make sure the HTTP verb is set to \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"GET\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" and press send. You should see something like this.\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"embedded-asset-block\",\"content\":[],\"data\":{\"target\":{\"sys\":{\"id\":\"2LjmCJ4VdzKy8OadwrI9KI\",\"type\":\"Link\",\"linkType\":\"Asset\"}}}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Let’s actually get some real todo data up in here. First let’s create a post method.\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"heading-3\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Routes/Todos.Js\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"router.post('/', function(req, res, next) {\\n    var todo = new Todo(req.body);\\n    todo.save(function(err, todo) {\\n        if (err) return next(err);\\n        res.status(201);\\n        res.json({message: \\\"Todo Created!\\\", todo: todo});\\n    });});\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Now let’s add our first todo! Change the HTTP Verb from \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"GET\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" to \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"POST\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\". Click the \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"body\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" tab, select the \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"raw\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" radio button and select \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"JSON(application/json)\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" from the dropdown. Let’s set \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"Mow the lawn\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" as our first todo. Since our \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"Todo Model\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" has default fields for the creation date and status, we only need to supply the title field. In the textarea below the radio buttons enter a json object for the todo like so.\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"embedded-asset-block\",\"content\":[],\"data\":{\"target\":{\"sys\":{\"id\":\"1YBVPaVkv7OGEWKsI89jiV\",\"type\":\"Link\",\"linkType\":\"Asset\"}}}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Add another todo, \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"Get \",\"marks\":[{\"type\":\"code\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"a haircut\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" just for kicks.\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Let’s change our \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"get\",\"marks\":[{\"type\":\"code\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"all todos\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" method to retrieve all of our todos.\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"heading-3\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Routes/Todos.Js\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"router.get('/', function(req, res, next) {\\n    Todo.find(function(err, todos){\\n        if (err) return next(err);\\n        res.json(todos);\\n    });});\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Test with postman, change HTTP verb back to \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"GET\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\", make sure url is \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"localhost:8080/api/todos\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" and press send. We should get back two total todos: \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"Mow the lawn\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" and \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"Get a haircut\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\".\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"heading-2\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Get Single Todo\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"We have three more actions to finish. All three will use the \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"id\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" params. Thankfully, Mongo automatically creates an \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"id\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" field for each todo document of type \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"ObjectId\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\".\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"router.get('/:id', function(req, res, next) {\\n    var id = mongoose.Types.ObjectId(req.params.id); // cast id param to ObjectId\\n    Todo.findById(id, function (err, todo) {\\n        if (err) return next(err);\\n        if (!todo) { err = new Error(\\\"Todo Not Found\\\"); err.status = 404; return next(err); } // if todo doesn't exist, set err\\n        res.json(todo);\\n    });});\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"In Postman, copy the \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"id\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" value for \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"Mow the lawn\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" and append it to the url to check.\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"heading-2\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Update Todo\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"We’ll use the \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"PUT\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" method to update our todos. Within that we’ll use the \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"findByIdAndUpdate\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" mongoose method. This will allow us to return the new todo in the response with the use of the \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"{ new: true }\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" parameter. We’ll also set the \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"validators\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" to true so users can’t enter a null todo.\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"router.put('/:id', function (req, res, next) {\\n    Todo.findByIdAndUpdate(req.params.id, req.body, { new: true, runValidators: true }, function (err, todo) {\\n        if (err) return next(err);\\n        if (!todo) { err = new Error(\\\"Todo Not Found\\\"); err.status = 404; return next(err); }\\n        res.json({ message: \\\"Todo updated!\\\", todo: todo });\\n    });});\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Change the HTTP verb in Postman to \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"PUT\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\". Make sure url is at \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"localhost:8080/api/todos/[id-of-mow-the-lawn]\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\". Now just like the \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"post\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" method we’re going to go the body tab, select raw and select JSON(application/json) from the dropdown. Let’s update \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"Mow the lawn\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"’s status to true, meaning we’ve completed the todo. In the textarea, type a json object with status equaling true.\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"{\\n    \\\"status\\\": true\\n}\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}],\"data\":{}},{\"nodeType\":\"heading-2\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Delete Todo\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Finally, for our last HTTP operation, we’ll set up a delete route. We can use \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"mongoose’s\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" remove method to achieve deleting a todo from the database.\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"router.delete('/:id', function (req, res, next) {\\n    Todo.findById(req.params.id, function (err, todo) {\\n        if (err) return next(err);\\n        if (!todo) { err = new Error(\\\"Todo Not Found\\\"); err.status = 404; return next(err); }\\n        todo.remove(function(err){\\n            if (err) return next(err);\\n            res.json({message: \\\"Todo deleted!\\\"});\\n        })\\n    });});\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}],\"data\":{}},{\"nodeType\":\"heading-2\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Conclusion\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"And just like that, we have a RESTful API up and running. In order for other domains to interact and fetch data from this API we will have to enable the \",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"content\":[{\"nodeType\":\"text\",\"value\":\"cors\",\"marks\":[],\"data\":{}}],\"data\":{\"uri\":\"https://github.com/expressjs/cors\"}},{\"nodeType\":\"text\",\"value\":\" package. CORS stands for \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"Cross-Origin Resource Sharing\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\". Domains, by default don’t allow other domains to fetch their data, we can remedy this by enabling cors to specific routes or all routes. We will tackle this in a future blog post with React.js.\",\"marks\":[],\"data\":{}}],\"data\":{}}]}"}},{"id":"690ebec7-5f08-5adc-834e-42fea6cceccf","contentful_id":"4b5XIb3TxmCuO6oby8RYFH","date":"March 29th, 2017","title":"MongoDB For Beginners","slug":"mongo-db-for-beginners","image":{"file":{"url":"//images.ctfassets.net/e87exinclc25/QJCNkJk56B1wwIHFR4sKG/bf1a1ad0c957feace25a2c35458bc93d/mongodb-for-beginners.png"}},"content":{"raw":"{\"nodeType\":\"document\",\"data\":{},\"content\":[{\"nodeType\":\"heading-2\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Introduction\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"MongoDB is a popular NoSQL database. It is usually the go to database for node apps since all the data stored in Mongo is formatted in JSON, it’s the perfect pairing to be able to use javascript in both the server and database. We’ll learn the basics of Mongo as well as how to use a GUI client.\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"heading-2\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Installation\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"First off, let’s \",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"content\":[{\"nodeType\":\"text\",\"value\":\"download MongoDB\",\"marks\":[],\"data\":{}}],\"data\":{\"uri\":\"https://www.mongodb.com/download-center?jmp=nav#community\"}},{\"nodeType\":\"text\",\"value\":\" and install it on our machine. If you’re using a Mac, \",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"content\":[{\"nodeType\":\"text\",\"value\":\"homebrew\",\"marks\":[],\"data\":{}}],\"data\":{\"uri\":\"https://brew.sh/\"}},{\"nodeType\":\"text\",\"value\":\" would be the best option to install it. Next, follow the following \",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"content\":[{\"nodeType\":\"text\",\"value\":\"instructions\",\"marks\":[],\"data\":{}}],\"data\":{\"uri\":\"https://docs.mongodb.com/manual/administration/install-community/\"}},{\"nodeType\":\"text\",\"value\":\" to make Mongo work on your corresponding operating system.\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"heading-2\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Starting Up Mongo\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"If you followed the instructions to a T, you should be able to start the Mongo daemon. Open a command line and type in:\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"mongod\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"You can end the process with \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"ctrl+c\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\".\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"If you decided to install the MongoDB service, refer to the \",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"content\":[{\"nodeType\":\"text\",\"value\":\"instructions\",\"marks\":[],\"data\":{}}],\"data\":{\"uri\":\"https://docs.mongodb.com/manual/administration/install-community/\"}},{\"nodeType\":\"text\",\"value\":\" for your OS again to see how to start Mongo.\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"heading-2\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Mongo Shell\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Now, we’ll use the Mongo shell to create and manage our databases. Open up a new instance of your command line, make sure you still have the daemon running, then type the following to enter the shell.\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"mongo\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}],\"data\":{}},{\"nodeType\":\"heading-2\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Creating A Database\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"If all goes well, let’s create our first database! Don’t worry, the command is only two words, we’ll create a database for a made up startup called \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"Innodos\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\". In the same command line where you logged into the shell, enter:\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"use Innodos;\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"With the \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"use\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" command we can create and switch to a database. If ever you need to see which database you’re currently on just type \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"db\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\".\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"heading-2\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Creating A Collection\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"If you’re familiar with MySQL, think of \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"collections\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" as the equivalent of a table. The rows in the table are reffered to as \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"documents\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" in Mongo. Let’s create a collection for our users.\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"db.createCollection('users');\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"You should recieve an \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"“ok”\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" message, let’s double check by running \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"show collections;\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\".\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"heading-2\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Inserting A Document Into Collection\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"What’s a users collection without any users. Let’s add two.\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"db.users.insert({ \\\"first_name\\\": \\\"John\\\", \\\"last_name\\\": \\\"Doe\\\" });db.users.insert({ \\\"first_name\\\": \\\"Carlos\\\", \\\"middle_name\\\": \\\"Ray\\\", \\\"last_name\\\": \\\"Norris\\\" });\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Notice how we have a middle name for the second user but not the first. This is one advantage of NoSQL, the ability to have whatever data you want in various documents, you don’t have to structure your collections in any way.\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Every document created, receives a random id field. To view all the user document’s info, run:\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"db.users.find();\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"You can add \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\".pretty()\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" after the \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"find\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" method to recieve a better looking output.\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"heading-2\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Updating A Document\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"When updating data, you want to make sure you select it using a unique identifier. Let’s use the id that Mongo created for us, run \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"db.users.find()\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" and copy \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"John Doe’s\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"_id\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" value. Let’s update the user \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"John Doe\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" and change his first name to \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"Jack\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\". Run the following command to change John’s name. Be sure to use the _id value that you copied earlier instead of the one shown below.\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"db.users.update({ \\\"_id\\\": ObjectId(\\\"58da68d9bd9ad44b1a931db2\\\") }, { $set: { \\\"first_name\\\": \\\"Jack\\\" } });\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}],\"data\":{}},{\"nodeType\":\"heading-3\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Removing A Field\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Let’s say we no longer want to include middle names as part of our user’s collection, let’s remove \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"Carlos Norris’\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" middle name like so.\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"db.users.update({ \\\"_id\\\" : ObjectId(\\\"58da68f7bd9ad44b1a931db3\\\") }, { $unset: { \\\"middle_name\\\": 1 } });\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"We can also omit the id selector and get the same affect.\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"db.users.update({}, { $unset: { \\\"middle_name\\\": 1 } });\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"This will select all the users, instead of just \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"Carlos\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\".\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"heading-2\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Deleting A Document\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"To delete a document, we can use the \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"remove\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" method. Just like update, we need to pass in a unique identifier. Let’s delete \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"Carlos\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" and use his \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"_id\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\".\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"db.users.remove({ \\\"_id\\\" : ObjectId(\\\"58da68f7bd9ad44b1a931db3\\\") });\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"To remove all users, omit the selector.\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"db.users.remove({});\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}],\"data\":{}},{\"nodeType\":\"heading-2\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Managing Your Databases\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"To view a list of created Databases, you can run \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"show dbs;\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\". You should see \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"Innodos\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" as well as \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"admin\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" and \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"local\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" which were created upon the MongoDB installation.\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Finally we’ll learn how to drop a database. Before dropping a database, make sure it’s currently in use. We can confirm this by running \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"db\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\". Once confirmed, we can drop \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"Innodos\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" with this command: \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"db.dropDatabase();\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\". Run \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"show dbs;\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" to confirm the drop.\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"heading-2\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Robomongo GUI\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"If you’re not into using a command line, \",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Robomongo\",\"marks\":[],\"data\":{}}],\"data\":{\"uri\":\"https://robomongo.org/\"}},{\"nodeType\":\"text\",\"value\":\" is a great GUI alternative. Once you have it installed you’ll need to set up a connection. Go to \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"File > Connect > Create\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\". It should look something like this:\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"embedded-asset-block\",\"content\":[],\"data\":{\"target\":{\"sys\":{\"id\":\"44sg2io9WY0eJ8YUl1Witg\",\"type\":\"Link\",\"linkType\":\"Asset\"}}}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"You can name it whatever you would like, but make sure the \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"address\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" is at localhost and the \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"port\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" is 27017. Now save and connect, make sure the \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"Mongo Daemon\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" is running before connecting.\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"heading-2\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Conclusion\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"In this tutorial, we learned all the basics of Mongo, from create, read, update and delete. If you would like to learn more you can always visit \",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Mongo’s official website\",\"marks\":[],\"data\":{}}],\"data\":{\"uri\":\"https://www.mongodb.com/\"}},{\"nodeType\":\"text\",\"value\":\".\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"\",\"marks\":[],\"data\":{}}],\"data\":{}}]}"}},{"id":"60386408-21fb-544c-8d6f-88f0e3b17467","contentful_id":"19mlO6vG7izSZlQWIxUKnx","date":"February 28th, 2017","title":"Getting Started With Node.js","slug":"getting-started-with-node-js","image":{"file":{"url":"//images.ctfassets.net/e87exinclc25/24SrRpnCLUvf1xfbyugyNN/24db1c6b4291bf4673e070a5724a447e/nodejs-getting-started.png"}},"content":{"raw":"{\"nodeType\":\"document\",\"data\":{},\"content\":[{\"nodeType\":\"heading-2\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Introduction\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Node is a javascript runtime environment that was built on top of google chrome’s V8 engine. It can be used to build many different things such as web and desktop apps, APIs, real-time applications, games, it can even act as a web server. In this lesson we’ll get into the basics of Node and NPM (Node Package Manager). NPM will help us install different modules used in modern javascript development.\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"heading-2\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Pre-Requisites\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"unordered-list\",\"content\":[{\"nodeType\":\"list-item\",\"content\":[{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"A text editor\",\"marks\":[],\"data\":{}}],\"data\":{}}],\"data\":{}},{\"nodeType\":\"list-item\",\"content\":[{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Some knowledge in javascript\",\"marks\":[],\"data\":{}}],\"data\":{}}],\"data\":{}},{\"nodeType\":\"list-item\",\"content\":[{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"A command line application and a \",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"content\":[{\"nodeType\":\"text\",\"value\":\"basic understanding of how to use it\",\"marks\":[],\"data\":{}}],\"data\":{\"uri\":\"https://crisnoel12.github.io/blog/introduction-to-the-command-line\"}},{\"nodeType\":\"text\",\"value\":\".\",\"marks\":[],\"data\":{}}],\"data\":{}}],\"data\":{}},{\"nodeType\":\"list-item\",\"content\":[{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"And of course, you need to have \",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Node.js installed\",\"marks\":[],\"data\":{}}],\"data\":{\"uri\":\"https://nodejs.org/en/\"}},{\"nodeType\":\"text\",\"value\":\".\",\"marks\":[],\"data\":{}}],\"data\":{}}],\"data\":{}}],\"data\":{}},{\"nodeType\":\"heading-2\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Setup\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"First, let’s create a folder in the desktop directory or any directory that you prefer. We’ll name it \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"node-intro\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\".\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"mkdir node-intro\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Then, cd into that directory and run \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"npm init\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\". It will prompt you to enter some information regarding the project information. For this tutorial it isn’t important so let’s just enter through it.\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Once you’ve gone through all the prompts, you should notice a \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"package.json\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" file was created in \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"node-intro\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\". This file holds all the information that you would of entered in the previous step, along with the list of npm packages you will install, which we’ll get into later.\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"heading-2\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Using NPM\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"NPM is a CLI tool that will help us manage javascript packages necessary for various projects. We’ll go through installing, updating, uninstalling and listing packages.\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"heading-3\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Installing Packages\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"npm install <package-name>\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"There are 3 different flags we can append to the end of the install command to save them in different locations:\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"unordered-list\",\"content\":[{\"nodeType\":\"list-item\",\"content\":[{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Global Flag (-g) - \",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"Packages that you tend to use in multiple projects. Can be used in any directory you’re in. Will save in your global packages list.\",\"marks\":[],\"data\":{}}],\"data\":{}}],\"data\":{}},{\"nodeType\":\"list-item\",\"content\":[{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Save Flag (-S) - \",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"Packages that your project depends on to function. Will save in your project’s package.json file under \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"dependencies\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\". Will be used in production environment.\",\"marks\":[],\"data\":{}}],\"data\":{}}],\"data\":{}},{\"nodeType\":\"list-item\",\"content\":[{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Dev Dependency Flag (-D) - \",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"Packages that your project doesn’t depend on to function. Will save in package.json file under \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"devDependecies\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\". Won’t be used in production environment.\",\"marks\":[],\"data\":{}}],\"data\":{}}],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"*These flags can be used for update and uninstall as well, depending on the package you’re targeting.\",\"marks\":[{\"type\":\"italic\"}],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Using the CLI inside the \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"node-intro\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" directory, let’s install 3 different packages using the optional flags:\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"heading-4\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Nodemon\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"A utility that restarts server upon code change.\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"npm install nodemon -g\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}],\"data\":{}},{\"nodeType\":\"heading-4\",\"content\":[{\"nodeType\":\"text\",\"value\":\"\\nExpress\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"A node web framework.\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"npm install express -S\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}],\"data\":{}},{\"nodeType\":\"heading-4\",\"content\":[{\"nodeType\":\"text\",\"value\":\"\\nWebpack\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"A front-end module bundler\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"npm install nodemon -D\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"After installing \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"express\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" and \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"webpack\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\", you should notice a \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"node_modules\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" folder was created. This holds the express and webpack packages along with their dependencies. Your packages.json should be updated as well and look like this:\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"{\\n  \\\"name\\\": \\\"node\\\",\\n  \\\"version\\\": \\\"1.0.0\\\",\\n  \\\"description\\\": \\\"\\\",\\n  \\\"main\\\": \\\"index.js\\\",\\n  \\\"scripts\\\": {\\n    \\\"test\\\": \\\"echo \\\\\\\"Error: no test specified\\\\\\\" && exit 1\\\"\\n  },\\n  \\\"author\\\": \\\"\\\",\\n  \\\"license\\\": \\\"ISC\\\",\\n  \\\"dependencies\\\": {\\n    \\\"express\\\": \\\"^4.14.1\\\"\\n  },\\n  \\\"devDependencies\\\": {\\n    \\\"webpack\\\": \\\"^2.2.1\\\"\\n  }}\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"A cool little tidbit with the package.json file. When sharing your project with colleagues through github, you generally dont want to include the node_modules folder since it can be quite large in file size. So how do your colleagues install all those packages that could total a dozen? As long as you uploaded the package.json file and saved the packages to the appropriate dependencies, then all they need to do is clone the project and run one command: \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"npm install\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\". It can save time and finger muscle fatigue.\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"heading-3\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Updating Packages\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"npm update <package-name>\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"To view your project’s outdated packages, run: \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"npm outdated\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\".\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"heading-3\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Uninstalling Packages\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"npm uninstall <package-name>\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"To remove packages from package.json file, append the necessary flags.\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"heading-3\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Listing Packages\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"npm list --depth=0\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"When listing packages, npm will list \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"ALL\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" the packages in the node_modules or global repository, add the \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"depth\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" flag and set it to \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"0\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" to view only the top level packages. To view global packages, append the \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"-g\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" flag.\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"heading-2\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Using Node\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"heading-3\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Running Javascript Files\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"With node we can run javascript files and see the output right in CLI. In the \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"node-intro\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" folder, create a new file called \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"app.js\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\". Let’s output a simple \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"Hello World!\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" message.\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"console.log(\\\"Hello World!\\\");\\n\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Now run:\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"node app.js\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"We should see \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"Hello World!\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" printed in the CLI.\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"heading-3\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Creating A Web Server\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"If you want to run a web server, node can do that too. Let’s create another file called \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"server.js\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" and paste in this code:\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"var http = require('http');var port = 8000;\\n\\nvar server = http.createServer(function (req, res) {\\n\\n  /*\\n    Response: plain text\\n  */\\n  res.writeHead(200, {'Content-Type': 'text/plain'});\\n  res.write(\\\"Hello World!\\\");\\n  res.end();\\n\\n}).listen(port);\\n\\nconsole.log(\\\"Server running on port \\\" + port);\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}],\"data\":{}},{\"nodeType\":\"heading-4\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Install Http\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Notice that we’re requiring the \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"http\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" package. Let’s install that with \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"NPM\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\".\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"heading-4\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Create Web Server\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"To use the http package as a web server, we set a variable called \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"server\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" and set it equal to the \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"createServer\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" method of http. Within that, we insert a callback function with two parameters: \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"req\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" and \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"res\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" (req standing for \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"request\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" and res standing for \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"response\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"). Since we don’t have routes set up for this example, the req and res data will be reflected once a http request is made to \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"localhost:8000\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\".\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"heading-4\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Fill With Response Data\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Inside the \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"server\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" callback function we call the res object and call on methods to set various data. We use \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"writeHead\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" to send a header with type of \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"text/plain\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" along with a 200 http status code. With the \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"write\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" method we can add any text we want to the document’s body. The \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"end\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" method will close the body, without this, the document won’t load.\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"heading-4\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Listen Function\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"The final piece to the puzzle is the listen function, we pass it the port number from line 2. So when a request is made to \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"localhost:8000\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\", the response data inside the server object will fire off.\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"heading-3\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Starting The Web Server\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"We’re ready to run the web server. Run \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"node server.js\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" in the CLI. It should display \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"Server running on port 8000\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\".\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Now open a web browser of your choice and enter \",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"content\":[{\"nodeType\":\"text\",\"value\":\"http://localhost:8000\",\"marks\":[],\"data\":{}}],\"data\":{\"uri\":\"http://localhost:8000/\"}},{\"nodeType\":\"text\",\"value\":\" in the address bar. If all goes to plan, you should see \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"Hello World!\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" printed out again, this time in the browser.\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"To stop the server, press \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"ctrl + c\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" in the CLI.\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"heading-2\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Conclusion\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Through the end of this tutorial, we’ve learned how to \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"install\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\", \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"update\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\", \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"uninstall\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" and \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"list\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" packages with NPM. We’ve covered the basics, but you can learn more at the \",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"content\":[{\"nodeType\":\"text\",\"value\":\"npm docs\",\"marks\":[],\"data\":{}}],\"data\":{\"uri\":\"https://docs.npmjs.com/\"}},{\"nodeType\":\"text\",\"value\":\" or if you want to look through the \",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"content\":[{\"nodeType\":\"text\",\"value\":\"most popular packages\",\"marks\":[],\"data\":{}}],\"data\":{\"uri\":\"https://www.npmjs.com/browse/star\"}},{\"nodeType\":\"text\",\"value\":\". With node, we’ve learned how to process a javascript file through the CLI, as well as create a simple web server.\",\"marks\":[],\"data\":{}}],\"data\":{}}]}"}},{"id":"1a520f4a-23cd-5bff-aea9-575bea89c6bb","contentful_id":"2PW0Vx1CdBOMapYK3Ruq45","date":"February 17th, 2017","title":"Introduction to the Command Line","slug":"introduction-to-the-command-line","image":{"file":{"url":"//images.ctfassets.net/e87exinclc25/6GFHc7oFIgPGIowFs2Dk20/6622a82ca3e42f608741d9f8af22df35/intro-cli.jpg"}},"content":{"raw":"{\"nodeType\":\"document\",\"data\":{},\"content\":[{\"nodeType\":\"heading-2\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Introduction\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"The command line interface (CLI) is an operating system application where you type in commands to run various tasks. As far as managing files and folders in the GUI, the CLI can do all that, but more. With the CLI we can install and update packages, edit a file and perform git related tasks. But before we can get into that, we’ll dive into the basics. In this lesson we’ll learn how to \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"create\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\", \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"rename\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\", \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"delete\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\", \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"copy\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" folders and files, as well as how to \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"move\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" around the filesystem.\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"heading-2\",\"content\":[{\"nodeType\":\"text\",\"value\":\"What We’ll Need\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"To follow along in this lesson we will need a unix-based CLI. Why unix? At the time of this post, 2 out of 3 major operating systems run on unix (\",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"Mac\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" and \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"Linux\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"), \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"Windows\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" is the only major OS that doesn’t run on unix, but no problemo, we can download \",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Cmder\",\"marks\":[],\"data\":{}}],\"data\":{\"uri\":\"http://cmder.net/\"}},{\"nodeType\":\"text\",\"value\":\". Cmder will give you the ability to use all the basic unix commands as well as a sleek and beautiful interface.\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"heading-2\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Opening The Command Line\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Let’s open the CLI and start learning. For mac and linux users, you’ll open an application called \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"terminal\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\". If you’re on Windows, navigate to where you extracted \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"cmder\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" and open the Cmder executable. Once you open the CLI, it should look something like this for Windows users:\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"embedded-asset-block\",\"content\":[],\"data\":{\"target\":{\"sys\":{\"id\":\"4ETfaKHJP5PaDvN4s6E0T8\",\"type\":\"Link\",\"linkType\":\"Asset\"}}}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"For Mac and Linux users, the text will look slightly different, it will show your computer’s name and username like so:\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Mac\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"MacbookName:~ username$\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Linux\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"username@MyLinux ~ $\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Before we dive into running commands, lets familiarize ourselves with the different parts of the console.\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"unordered-list\",\"content\":[{\"nodeType\":\"list-item\",\"content\":[{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"The initial text you see in the console is the path to your current working directory (Think of the current working directory as the equivalent of using your operating system’s file explorer to navigate into a specific folder), it should default to the currently logged in user’s home folder. For Mac and Linux, the ~ refers to the user’s home folder.\\n\",\"marks\":[],\"data\":{}}],\"data\":{}}],\"data\":{}},{\"nodeType\":\"list-item\",\"content\":[{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"The \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"$ \",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"or \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"λ\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" followed by a cursor is where you start typing in your commands.\",\"marks\":[],\"data\":{}}],\"data\":{}}],\"data\":{}}],\"data\":{}},{\"nodeType\":\"heading-2\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Our First Command\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Now we’re ready to run commands. In the command line, type in the command: \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"pwd\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" and hit enter. \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"Pwd\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" stands for \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"Print Working Directory\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\". This command will print out your \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"current working directory\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\", useful when you’re not sure where you are in the filesystem.\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"heading-2\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Changing Directories\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"We can change our \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"current working directory\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" by using the \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"cd\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" command. By default you should be in your user home folder. Let’s go into the \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"desktop\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" folder.\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"cd Desktop\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"If you run \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"pwd\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" now, you should notice the path changed to your desktop.\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"heading-3\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Going Up A Directory\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Let’s say we want to go back to our home folder. We can go there with two periods \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"..\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"cd ..\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Alternatively, if you’re using Mac or Linux, we can achieve the same thing with the tilde character, remember that the tilde refers to the user’s home folder.\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"cd ~\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}],\"data\":{}},{\"nodeType\":\"heading-3\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Going Up Multiple Directories\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"If you’re in two directories of where you want to be, you can navigate back up with two more periods prepended with a forward slash like so:\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"cd ../..\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"If you’re three directories deep, add another backslash and two periods.\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"heading-3\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Going Down Multiple Directories\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Essentially the same as going up, but instead of periods you’ll enter the name of the directory.\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"cd firstDir/secondDir\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}],\"data\":{}},{\"nodeType\":\"heading-2\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Creating A Directory\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"We create directories with the \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"mkdir\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" command which stands for \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"Make Directory\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\". Let’s navigate to the desktop and create a directory called \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"myWebsite\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\".\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"mkdir myWebsite\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}],\"data\":{}},{\"nodeType\":\"heading-2\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Creating Files\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Change directories into \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"myWebsite\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\". We will create two files: \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"index.html\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" and \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"main.css\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" using the \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"touch\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" command.\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"touch index.html main.css\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}],\"data\":{}},{\"nodeType\":\"heading-2\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Listing Files/Folders\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"To list files and folders, use the \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"ls\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" command, it stands for list.\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"ls\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"You should see \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"index.html\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" and \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"main.css\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" listed out.\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"There are options you can append to the \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"ls\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" command to show extra information:\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"unordered-list\",\"content\":[{\"nodeType\":\"list-item\",\"content\":[{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"[ls -l] \",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"Shows files and folders in long form along with permissions, file size, date that it was updated.\",\"marks\":[],\"data\":{}}],\"data\":{}}],\"data\":{}},{\"nodeType\":\"list-item\",\"content\":[{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"[ls -a] \",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"Shows hidden files and folders (files and folders prefixed with a period).\",\"marks\":[],\"data\":{}}],\"data\":{}}],\"data\":{}},{\"nodeType\":\"list-item\",\"content\":[{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"[ls -sh] \",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"Shows sizes of files and folders in human readable form.\",\"marks\":[],\"data\":{}}],\"data\":{}}],\"data\":{}}],\"data\":{}},{\"nodeType\":\"heading-2\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Moving Files/Folders\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Let’s reorganize and move the \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"main.css\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" file into a \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"css\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" folder. Create a \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"css\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" folder with the \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"mkdir\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" command, make sure your current working directory is \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"myWebsite\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\". Now we can move \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"main.css\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" with the \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"mv\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" command. We type mv followed by the file or folder we want to move and then follow that by the directory we want to move it to.\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"mv main.css css\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Cd into the css folder and use the \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"ls\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" command. You should see \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"main.css\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" relocated.\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"heading-2\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Renaming Files/Folders\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Renaming and moving files/folders are very similar, they both use the \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"mv\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" command. Instead of specifying the folder you want to relocate to, you just makeup a name that you want to rename your file/folder. Let’s rename \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"main.css\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" to \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"styles.css\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\".\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"mv main.css styles.css\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Let’s run \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"ls\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" again to check that we did it correctly.\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"heading-2\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Deleting Files/Folders\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"To demonstrate deletion commands, create one new folder named \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"test\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" and one new file named \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"custom.css\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\". The command we will use is \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"rm\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\", it stands for remove and it will completely remove those files/folders from your computer. Let’s remove the \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"custom.css\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" file.\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"rm custom.css\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"For the \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"test\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" folder we cant just use \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"rm\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\", it will result in an error, we must use the \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"-r\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" option which stands for recursively. So run:\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"rm -r test\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Double check that they’re gone using \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"ls\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\".\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"heading-2\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Copying Files/Folders\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"If you need to copy a file/folder, use the \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"cp\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" command. The syntax for that is \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"cp\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"folderToBeCopied\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"newCopiedFolder\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\". Let’s recreate the \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"test\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" folder and \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"custom.css\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" file that we deleted in the last section. Now let’s copy \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"custom.css\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" into a new file called \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"custom2.css\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\".\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"cp custom.css custom2.css\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"With directories, we have to use the \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"-r\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" flag again, or else we’ll get an error. Let’s recreate the \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"test\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" folder into a folder named \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"test2\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\".\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"cp test test2\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}],\"data\":{}},{\"nodeType\":\"heading-2\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Tips And Tricks\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"heading-3\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Clearing The Command Line\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Nearing the end of the tutorial, you should notice the command line getting bloated with multiple lines of commands. You can clear the screen with the \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"clear\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" command to have a cleaner work area.\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"heading-3\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Cycling Through Commands\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"If ever you need to run a previous command you can use the \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"up\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" and \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"down\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" arrow keys to cycle through your previous commands.\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"heading-3\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Tab Auto-Completion\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Whenever you’re running a task on a file or folder, instead of typing out the entire name, you can type part of the name then hit the \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"tab\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" key to autocomplete the name of the file or folder. For example lets say I’m in the \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"myWebsite\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" directory and I’m trying to get into the \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"css\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" folder, I would type \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"cd c\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" then hit \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"tab\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" to autocomplete the folder name. Highly useful when dealing with long file/folder names.\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"heading-2\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Conclusion\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"You should now feel comfortable using the command line, but you know what they say, practice makes perfect. Try using the command line instead of your Operating System’s GUI when creating and managing new projects.\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"\",\"marks\":[],\"data\":{}}],\"data\":{}}]}"}},{"id":"fb58b36c-deca-5a53-b42f-dbff8d3d0d7f","contentful_id":"4Sh8T1DEcFrHKYhbnHS3sZ","date":"January 27th, 2017","title":"How to Implement a Hero Image In Your Website","slug":"how-to-implement-a-hero-image-in-your-website","image":{"file":{"url":"//images.ctfassets.net/e87exinclc25/6ZVhcFONXmDPgphlgxZ8tp/a00457886a44c7c97e2e8ce642d89f66/post-hero-image-tutorial.png"}},"content":{"raw":"{\"nodeType\":\"document\",\"data\":{},\"content\":[{\"nodeType\":\"heading-2\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Introduction\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Hero images are a growing web design trend seen in most modern websites today. It grabs the visitor’s attention due to it’s aesthetically pleasing layout. In this tutorial we will look at how to implement a simple hero image as shown above.\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"heading-2\",\"content\":[{\"nodeType\":\"text\",\"value\":\"1. Picking An Image\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Make sure your image is a high resolution photo, or it might not look so good. If you’re downloading an image off the internet, you have to make sure you own the rights to that image, especially if you’re going to upload your website to production. \",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Makerbook\",\"marks\":[],\"data\":{}}],\"data\":{\"uri\":\"http://makerbook.net/\"}},{\"nodeType\":\"text\",\"value\":\", which links to different photo hosting websites, has tons of high resolution images that are under the creative commons zero license, meaning they’re 100% free to use.\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"heading-2\",\"content\":[{\"nodeType\":\"text\",\"value\":\"2. Coding The HTML\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Most hero images implemented in a web browser have a \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"heading and tagline text\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" in the middle of the site, a fixed transparent \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"navigation bar\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" at the top of the page and maybe a \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"ghost button\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" below your text. All of those elements will be inside of a div with an id of \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"hero\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\". To get the texts and button in the middle of the page, we will place them inside of a div with an id of \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"hero-mid\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\".\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"heading-3\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Index.Html\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n<head>\\n    <meta charset=\\\"UTF-8\\\">\\n    <title>Hero Image Tutorial</title>\\n    <link rel=\\\"stylesheet\\\" href=\\\"https://cdnjs.cloudflare.com/ajax/libs/normalize/4.0.0/normalize.min.css\\\">\\n    <link rel=\\\"stylesheet\\\" href=\\\"styles.css\\\">\\n</head>\\n<body>\\n    <div id=\\\"hero\\\">\\n        <nav>\\n            <logo>&#127796; LOGO</logo>\\n            <ul id=\\\"nav-menu\\\">\\n                <li>Home</li>\\n                <li>About</li>\\n                <li>Events</li>\\n                <li>Locations</li>\\n            </ul>\\n        </nav>\\n        <div id=\\\"hero-mid\\\">\\n            <p id=\\\"tagline\\\">City of Champions</p>\\n            <h1 id=\\\"headline\\\">TAMPA BAY</h1>\\n            <a id=\\\"ghost-btn\\\" href=\\\"#\\\">Learn More</a>\\n        </div>\\n    </div>\\n</body>\\n</html>\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}],\"data\":{}},{\"nodeType\":\"heading-3\",\"content\":[{\"nodeType\":\"text\",\"value\":\"3. Coding The CSS\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"The final step to make this all work is to code the \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"styles.css\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" file. We’ll split it to four parts: \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"html & body\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\", \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"hero div\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\", \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"hero-mid\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"div\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" and \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"navigation bar\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\".\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"heading-3\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Html & Body\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"First we have to give the html and body tags a height of 100% so that the document takes up the full height of the browser window.\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"html, body{\\n    height: 100%;\\n    font-family: monospace;\\n}\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}],\"data\":{}},{\"nodeType\":\"heading-3\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Hero Div\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Next, we’ll take the hero div, enter the url for the image and keep it centered. Then we want to set the height to 100% so that it takes up the full height of the browser and also set the \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"background-size\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" property to cover so that the image is fully inside the window. Finally, like most hero images, an overlay is usually applied. To achieve this we will set the \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"background-blend-mode\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" property to overlay and then set the \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"background-color\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" to an rgba value.\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"#hero{\\n    background: url('https://images.unsplash.com/photo-1475522003475-eb5f96f1f930?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&s=472955c703541d5820e9f52eadee7bc4') center no-repeat;\\n    height: 100%;\\n    background-size: cover;\\n    background-blend-mode: overlay;\\n    background-color: rgba(80, 73, 48, 0.9);\\n}\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}],\"data\":{}},{\"nodeType\":\"heading-3\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Hero-Mid Div\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"For the hero-mid div we will assign property values so that the div and all of its containing elements will align to the middle of the containing \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"hero div\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\". After that you can style the headline, tagline and ghost button however you like.\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"#hero-mid{\\n    position: absolute;\\n    top: 50%;\\n    left: 50%;\\n    right: 0;\\n    transform: translate(-50%, -50%);\\n    text-align: center;\\n}\\n#headline{\\n    font-family: fantasy;\\n    font-size: 4.5em;\\n    letter-spacing: .09em;\\n    margin-top: 5px;\\n    margin-bottom: 5px;\\n    color: white;\\n}\\n#tagline{\\n    font-size: 1.5em;\\n    letter-spacing: .2em;\\n    margin: 0;\\n    color: rgba(255,255,255,.9);\\n}\\n#ghost-btn{\\n    color: white;\\n    text-decoration: none;\\n    border: 3px solid white;\\n    padding: 12px;\\n    display: inline-block;\\n    margin-top: 30px;\\n    letter-spacing: .08em;\\n}\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}],\"data\":{}},{\"nodeType\":\"heading-3\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Navigation Bar\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Last but not least, we’ll code the navigation bar. We’ll give the nav element a \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"fixed\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" position in order for it to stay at the top of the document even after scrolling the page, and a \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"z-index\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" of 1001 so that it will stay above other elements that may have a high z-index. We’ll want the logo div on the left and the nav-menu on the right, so we will give them a \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"float\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" property of left and right respectively.\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"nav{\\n    position: fixed;\\n    z-index: 1001;\\n    width: 100%;\\n    padding-top: 10px;\\n}\\nnav logo{\\n    float: left;\\n    margin: 13px 0;\\n    padding-left: 40px;\\n    color: white;\\n    font-size: 1.2em;\\n    font-weight: bold;\\n}\\nnav #nav-menu{\\n    float: right;\\n    padding: 0;\\n    padding-right: 40px;\\n}\\n#nav-menu li{\\n    display: inline;\\n    color: white;\\n    margin: 0 15px;\\n    font-size: 1.2em;\\n}\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}],\"data\":{}},{\"nodeType\":\"heading-2\",\"content\":[{\"nodeType\":\"text\",\"value\":\"Conclusion\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"And we’re done! Now this isn’t the de-facto way to create a hero image, this is just to give you an idea. You could rearrange and style the text, logo, navigation and buttons however you wish. You could even re-create the overlay blend in photoshop or gimp, it could be easier to find a suitable blend that way instead of playing with rgba values. But I’d suggest keeping the text in html for SEO purposes.\",\"marks\":[],\"data\":{}}],\"data\":{}},{\"nodeType\":\"paragraph\",\"content\":[{\"nodeType\":\"text\",\"value\":\"\",\"marks\":[],\"data\":{}}],\"data\":{}}]}"}}]}},"pageContext":{}},"staticQueryHashes":[]}